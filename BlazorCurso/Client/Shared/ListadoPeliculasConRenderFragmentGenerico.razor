@inject IJSRuntime js
@inject IRepositorio _repositorio
@inject IMostrarMensajes _mostrarMensajes

@if (ListaPeliculas == null)
{
    @if (Cargando == null)
    {
        <text>Cargando...</text>
    }
    else
    {
        @Cargando
    }
}
else if (ListaPeliculas.Count == 0)
{
    @if (NoRegistros == null)
    {
        <text>No hay registros</text>
    }
    else
    {
        @NoRegistros
    }
}
else
{
    <div style="display: flex; flex-wrap:wrap; align-items:center;">
        <ListadoGenerico ListaGenerica="ListaPeliculas">
            <HayRegistros>
                <DetallePelicula pelicula="context" EliminarPelicula="EliminarPelicula" @key="context.Id"></DetallePelicula>
            </HayRegistros>
        </ListadoGenerico>
    </div>
}

@code {
    [Parameter] public List<Pelicula> ListaPeliculas { get; set; }
    [Parameter] public RenderFragment Cargando { get; set; }
    [Parameter] public RenderFragment NoRegistros { get; set; }
    bool mostrarBotones = true;

    private async Task EliminarPelicula(Pelicula pelicula)
    {
        var responseHttp = await _repositorio.Delete($"api/peliculas/{pelicula.Id}");

        if (responseHttp.Error)
        {
            await _mostrarMensajes.MostrarMensajeError(await responseHttp.GetBody());
        }
        else
        {
            ListaPeliculas.Remove(pelicula);
        }
    }

}